@model puck.Models.PuckImage

@{
    var settings = this.PuckEditorSettings<puck.core.Models.EditorSettings.PuckImageEditorSettings>()
        ?? new puck.core.Models.EditorSettings.PuckImageEditorSettings()
        {
            Crops=new List<puck.core.Models.CropModel>()
        };

}
    <div class="puckImage puckimage_@ViewData.ModelMetadata.PropertyName">
        
        <ul class="nav nav-tabs" id="myTab">
            <li class="active"><a data-toggle="tab" href="#_puckImage_info_tab_@ViewData.ModelMetadata.PropertyName">Image info</a></li>
            <li><a data-toggle="tab" href="#_puckImage_crops_tab_@ViewData.ModelMetadata.PropertyName">Crops</a></li>
        </ul>

        <div class="tab-content">
            <div class="tab-pane active" id="_puckImage_info_tab_@ViewData.ModelMetadata.PropertyName">
                @Html.EditorFor(x => x.Path)
                <div class="editor-label" style="">
                    @Html.LabelFor(x => x.Description)
                    @Html.ValidationMessageFor(x => x.Description)
                </div>
                <div class="editor-field">
                    @Html.EditorFor(x => x.Description)
                </div>
                @if (!string.IsNullOrEmpty(Model.Extension))
                {
                <div class="field">
                    <span>Extension:</span>@Html.EditorFor(x => x.Extension)
                </div>
                }
                @if (!string.IsNullOrEmpty(Model.Width?.ToString()))
                {
                <div class="field">
                    <span>Width:</span>@Html.EditorFor(x => x.Width)
                </div>
                }
                @if (!string.IsNullOrEmpty(Model.Height?.ToString()))
                {
                <div class="field">
                    <span>Height:</span>@Html.EditorFor(x => x.Height)
                </div>
                }
                @if (!string.IsNullOrEmpty(Model.Size))
                {   
                <div class="field">
                    <span>Size:</span>@Html.EditorFor(x => x.Size)
                </div>
                }
                @Html.EditorFor(x => x.File)
            </div>
            <div class="tab-pane" id="_puckImage_crops_tab_@ViewData.ModelMetadata.PropertyName">
                <div class="cropSizes">
                    @foreach (var c in settings.Crops ?? new List<puck.core.Models.CropModel>()) {
                        <div class="cropSize" data-alias="@c.Alias" data-width="@c.Width" data-height="@c.Height">
                            <div>
                                <span>@c.Alias</span>
                                <br />
                                <span>@c.Width<text>x</text>@c.Height</span>
                            </div>                            
                        </div>
                    }
                </div>
                <div class="message"></div>
                <div class="viewport" style="height:auto;width:500px;">

                </div>
            </div>            
        </div>

        <div class="selected_content">

        </div>
    </div>
<script type="text/javascript">
    onAfterDom(function () {
        var propname = "@ViewData.ModelMetadata.PropertyName";
        var container = $(".puckimage_" + propname);
        container.parents(".editor-field:first").css({clear:"both"});
        var viewportWidth = 500;
        var originalWidth = @Model.Width;
        var originalHeight = @Model.Height;
        var imageUrl = '@Model.Path';
        var viewport = container.find(".viewport");
        var selected_container = container.find(".selected_content");
        var message_container = container.find(".message");
        var setupImage = function (cropAlias, cropWidth, cropHeight,coords) {
            //viewport.find("img").remove();
            var img = $("<img/>").attr({ src: imageUrl });
            if (viewport.find("img").length == 0)
                viewport.append(img);
            else
                img = viewport.find("img");
            viewport.css({ width: viewportWidth }).find(".cropper").remove();
            var imgWidth;
            var cropperWidth;
            var cropperHeight;
            var aRatio = originalWidth / originalHeight;
            var resize = false;
            message_container.html("");
            if (cropWidth > originalWidth || cropHeight > originalHeight) {
                imgWidth = cropWidth > viewportWidth ? viewportWidth : cropWidth;
                resize = true;
                message_container.html("image is smaller than target crop size, the image will be resized to fit.");
            } else {
                imgWidth = originalWidth > viewportWidth ? viewportWidth : originalWidth;
            }
            var cropARatio = cropWidth / cropHeight;
            var imgHeight = imgWidth / aRatio;
            widthRatio = originalWidth / imgWidth;
            cropperWidth = cropWidth / widthRatio;
            cropperHeight = cropperWidth / cropARatio;

            img.css({ width: imgWidth });
            if (!resize) {
                var cropper = $("<div/>").attr({ class: "cropper" }).css({ width: cropperWidth, height: cropperHeight, zIndex: 2 });
                cropper.draggable({
                    containment: 'parent'
                    , stop: function (event, ui) {
                        var leftPercent = ui.position.left / imgWidth;
                        var topPercent = ui.position.top / imgHeight;
                        var rightPercent = (imgWidth - (ui.position.left + cropperWidth)) / imgWidth;
                        var bottomPercent = (imgHeight - (ui.position.top + cropperHeight)) / imgHeight;
                        console.log(leftPercent,topPercent,rightPercent,bottomPercent);
                    }
                });
                viewport.append(cropper);
            }
            if (imgWidth < viewportWidth)
                viewport.css({ width: imgWidth });
            viewport.css({ height: imgHeight });
            
            
        }
        container.find(".cropSize").click(function () {
            var el = $(this);
            container.find(".cropSize").removeClass("active");
            el.addClass("active");
            var alias = el.attr("data-alias");
            var width = el.attr("data-width");
            var height = el.attr("data-height");
            var coords = el.attr("data-coords");
            setupImage(alias,width,height,coords);
        });

        container.find(".cropSize:first").click();

        var setValue = function () {
            container.find("input:hidden").remove();
            selected_content().each(function (i) {
                var node = $(this);
                container.append(
                    "<input type='hidden' name='" + propname + "[" + i + "].Id' value='" + node.attr("data-id") + "'/>"
                    + "<input type='hidden' name='" + propname + "[" + i + "].Variant' value='" + node.attr("data-variant") + "'/>"
                );
            });
        }
        //setValue();
        
    });    
</script>
<style>
    .puckImage .field div{
        display:inline;
    }
    .puckImage .cropSize {
        border:1px solid #dddddd;
        margin:0px;
        padding:0px;
        display:inline-block;
        cursor:pointer;
    }
    .puckImage .cropSize.active {
        background:#eeeeee/*00ff7f*/;
    }
    .puckImage .cropSize > div {
        padding:8px;
    }
    .puckImage .cropper {
        border:1px solid #dddddd;
        background-color:rgba(255, 216, 0,0.5);
        position:absolute!important;
        top:0px;
        left:0px;
    }
    .puckImage .viewport {
        position:relative;
    }
</style>